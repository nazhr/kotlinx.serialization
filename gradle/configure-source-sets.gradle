/*
 * Copyright 2017-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

kotlin {
    jvm('jvm') {
        withJava()
        if (rootProject.ext.build_snapshot_train) {
            attributes.attribute(rootProject.ext.jvmCompilerTypeAttr, 'jvm')
        }
        configure([compilations.main, compilations.test]) {
            kotlinOptions {
                jvmTarget = '1.6'
            }
        }
    }
    if (rootProject.ext.build_snapshot_train) {
        jvm('jvmIr') {
            attributes.attribute(rootProject.ext.jvmCompilerTypeAttr, 'jvmIr')
            configure([compilations.main, compilations.test]) {
                kotlinOptions {
                    jvmTarget = '1.6'
                    useIR = true
                }
            }
            // Do not publish JVM IR into repository
            mavenPublication { targetPublication ->
                tasks.withType(PublishToMavenRepository)
                        .matching { it.publication == targetPublication }
                        .all { onlyIf { false } }
            }
        }
    }
    js {
        nodejs {}
        configure([compilations.main, compilations.test]) {
            kotlinOptions {
                sourceMap = true
                moduleKind = "umd"
                metaInfo = true
            }
        }
    }

    sourceSets.all {
        kotlin.srcDirs = ["$it.name/src"]
        resources.srcDirs = ["$it.name/resources"]
        languageSettings {
            progressiveMode = true
            useExperimentalAnnotation("kotlin.Experimental")
            useExperimentalAnnotation("kotlin.ExperimentalMultiplatform")
            useExperimentalAnnotation("kotlin.ExperimentalStdlibApi")
            useExperimentalAnnotation("kotlinx.serialization.InternalSerializationApi")
        }
    }

    sourceSets {
        if (rootProject.ext.build_snapshot_train) {
            jvmIrMain {
                dependsOn jvmMain
            }
            jvmIrTest {
                dependsOn jvmTest
            }
        }

        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }

        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }

        jvmTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }

        jsTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }

        nativeMain.dependencies {
        }
    }

    sourceSets.findAll({ it.name.contains("Test") }).forEach { srcSet ->
        srcSet.languageSettings {
            it.useExperimentalAnnotation("kotlinx.serialization.InternalSerializationApi")
            it.useExperimentalAnnotation("kotlinx.serialization.ExperimentalSerializationApi")
        }
    }

    sourceSets.matching({ it.name.contains("Main") }).all { srcSet ->
        project.ext.set("kotlin.mpp.freeCompilerArgsForSourceSet.${srcSet.name}", "-Xexplicit-api=warning")
    }
}

if (rootProject.ext.build_snapshot_train) {
    configurations {
        // configure Java plugin configurations
        configure([compileClasspath, testCompileClasspath, testRuntimeClasspath]) {
            attributes.attribute(rootProject.ext.jvmCompilerTypeAttr, 'jvm')
        }
    }
}